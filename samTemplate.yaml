AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: MERN-301
Globals:

  Function:
    Runtime: nodejs8.10

    Environment:
      Variables:
        APP_NAME: GiftApp

  Api:
    # enable CORS; to make more specific, change the origin wildcard
    # to a particular domain name, e.g. "'www.example.com'"
    # Cors:
    #  AllowMethods: "'*'"
    #  AllowHeaders: "'*'"
    #  AllowOrigin: "'*'"
    #Cors: "'http://localhost:3000'"
    Cors:
      AllowMethods: "'*'"
      AllowHeaders: "'*'"
      AllowOrigin: "'*'"

    EndpointConfiguration: REGIONAL

Resources:
  # HelloFunctionGR:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     Handler: hello.handler
  #     Runtime: nodejs6.10
  #     CodeUri: ./
  #     Policies: AmazonDynamoDBFullAccess
  #     Events:
  #       HelloTimeApiGR:
  #         Type: Api
  #         Properties:
  #           Path: /HelloResourceGR
  #           Method: GET
  GetCategoriesFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: lambdas/category/getCategories.handler
      Runtime: nodejs8.10
      CodeUri: ./src
      Policies: AmazonDynamoDBFullAccess
      Events:
        GetCategoriesApi:
          Type: Api
          Properties:
            Path: /categories
            Method: GET

  GetCategoryFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: lambdas/category/getCategory.handler
      Runtime: nodejs8.10
      CodeUri: ./src
      Policies: AmazonDynamoDBFullAccess
      Events:
        GetCategoryApi:
          Type: Api
          Properties:
            Path: /categories/{id}
            Method: GET


  PostCategoryFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: lambdas/category/postCategory.handler
      Runtime: nodejs8.10
      CodeUri: ./src
      Policies: AmazonDynamoDBFullAccess
      Events:
        PostCategoryApi:
          Type: Api
          Properties:
            Path: /categories
            Method: POST

  PutCategoryFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: lambdas/category/putCategory.handler
      Runtime: nodejs8.10
      CodeUri: ./src
      Policies: AmazonDynamoDBFullAccess
      Events:
        GetCategoryApi:
          Type: Api
          Properties:
            Path: /categories
            Method: PUT

  DeleteCategoryFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: lambdas/category/deleteCategory.handler
      Runtime: nodejs8.10
      CodeUri: ./src
      Policies: AmazonDynamoDBFullAccess
      Events:
        GetCategoryApi:
          Type: Api
          Properties:
            Path: /categories/{id}
            Method: DELETE

  GetAllProductsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: lambdas/products/getProducts.handler
      Runtime: nodejs8.10
      CodeUri: ./src
      Policies: AmazonDynamoDBFullAccess
      Events:
        GetAllProductsApi:
          Type: Api
          Properties:
            Path: /products
            Method: GET

  ProductUpdateFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: lambdas/products/updateProduct.handler
      Runtime: nodejs8.10
      CodeUri: ./src
      Policies: AmazonDynamoDBFullAccess
      Events:
        GetCategoryApi:
          Type: Api
          Properties:
            Path: /updateProduct
            Method: PATCH
  
  InsertProductFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: lambdas/products/postProduct.handler
      Runtime: nodejs8.10
      CodeUri: ./src
      Policies: AmazonDynamoDBFullAccess
      Events:
        GetCategoryApi:
          Type: Api
          Properties:
            Path: /product
            Method: POST
            
  RemoveProductFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: lambdas/products/deleteProduct.handler
      Runtime: nodejs8.10
      CodeUri: ./src
      Policies: AmazonDynamoDBFullAccess
      Events:
        GetCategoryApi:
          Type: Api
          Properties:
            Path: /removeproduct
            Method: DELETE
   GetRecommendedProductsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: lambdas/products/recommendedProducts.handler
      Runtime: nodejs8.10
      CodeUri: ./src
      Policies: AmazonDynamoDBFullAccess
      Events:
        GetAllProductsApi:
          Type: Api
          Properties:
            Path: /recommendedproducts
            Method: GET

  # GetProductByIdFunction:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     Handler: lambdas/products/getProduct.handler
  #     Runtime: nodejs8.10
  #     CodeUri: ./src
  #     Policies: AmazonDynamoDBFullAccess
  #     Events:
  #       GetProductByIdApi:
  #         Type: Api
  #         Properties:
  #           Path: /products/{id}
  #           Method: GET

  PostTransactionFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: lambdas/transaction/postTransaction.handler
      Runtime: nodejs8.10
      CodeUri: ./src
      Policies: AmazonDynamoDBFullAccess
      Events:
        PostTransactionApi:
          Type: Api
          Properties:
            Path: /postTransactions
            Method: POST

  GetTransactionsFunction:
    Type: AWS::Serverless::Function 
    Properties:
      Handler: lambdas/transaction/getTransactions.handler
      Runtime: nodejs8.10
      CodeUri: ./src
      Policies: AmazonDynamoDBFullAccess
      Events:
        GetTransactionApi:
          Type: Api
          Properties:
            Path: /transactions
            Method: GET
    
  # GetTransactionFunction:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     Handler: lambdas/transaction/getTransaction.handler
  #     Runtime: nodejs8.10
  #     CodeUri: ./src
  #     Policies: AmazonDynamoDBFullAccess
  #     Events:
  #       GetTransactionsApi:
  #         Type: Api
  #         Properties:
  #           Path: /transactions/{id}
  #           Method: GET
          
  GetTransactionHistoryFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: lambdas/transaction/getTransactionHistory.handler
      Runtime: nodejs8.10
      CodeUri: ./src
      Policies: AmazonDynamoDBFullAccess
      Events:
        GetTransactionsApi:
          Type: Api
          Properties:
            Path: /transactionHistory
            Method: GET

  GetSortedProductsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: lambdas/products/getSortedProducts.handler
      Runtime: nodejs8.10
      CodeUri: ./src
      Policies: AmazonDynamoDBFullAccess
      Events:
        GetCategoryApi:
          Type: Api
          Properties:
            Path: /sortedProducts
            Method: POST

  UserLoginFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: lambdas/users/loginUser.handler
      Runtime: nodejs8.10
      CodeUri: ./src
      Policies: AmazonDynamoDBFullAccess
      Events:
        GetCategoryApi:
          Type: Api
          Properties:
            Path: /loginUser
            Method: POST
  
  UserUpdateFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: lambdas/users/updateUser.handler
      Runtime: nodejs8.10
      CodeUri: ./src
      Policies: AmazonDynamoDBFullAccess
      Events:
        GetCategoryApi:
          Type: Api
          Properties:
            Path: /updateUser
            Method: PATCH

  ProductByCategoryFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: lambdas/products/getProductByCategory.handler
      Runtime: nodejs8.10
      CodeUri: ./src
      Policies: AmazonDynamoDBFullAccess
      Events:
        GetCategoryApi:
          Type: Api
          Properties:
            Path: /products/byCategory
            Method: GET
  
  CategoryProductByPriceFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: lambdas/products/getCategoryProductByPrice.handler
      Runtime: nodejs8.10
      CodeUri: ./src
      Policies: AmazonDynamoDBFullAccess
      Events:
        GetCategoryApi:
          Type: Api
          Properties:
            Path: /products/byPriceCategory
            Method: GET

  GetUserByEmailFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: lambdas/users/getUser.handler
      Runtime: nodejs8.10
      CodeUri: ./src
      Policies: AmazonDynamoDBFullAccess
      Events:
        GetProductByIdApi:
          Type: Api
          Properties:
            Path: /user
            Method: GET
  
  GetFilteredByPriceFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: lambdas/products/getFilteredByPrice.handler
      Runtime: nodejs8.10
      CodeUri: ./src
      Policies: AmazonDynamoDBFullAccess
      Events:
        GetProductByIdApi:
          Type: Api
          Properties:
            Path: /filteredPrice
            Method: GET

  FilterProductsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: lambdas/products/filterProduct.handler
      Runtime: nodejs8.10
      CodeUri: ./src
      Policies: AmazonDynamoDBFullAccess
      Events:
        GetProductByIdApi:
          Type: Api
          Properties:
            Path: /products/filter
            Method: GET      

  FetchCommentsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: lambdas/comment/fetchComments.handler
      Runtime: nodejs8.10
      CodeUri: ./src
      Policies: AmazonDynamoDBFullAccess
      Events:
        GetProductByIdApi:
          Type: Api
          Properties:
            Path: /comments
            Method: GET

  PostCommentsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: lambdas/comment/postComments.handler
      Runtime: nodejs8.10
      CodeUri: ./src
      Policies: AmazonDynamoDBFullAccess
      Events:
        GetProductByIdApi:
          Type: Api
          Properties:
            Path: /comments
            Method: POST
  CognitoLoginFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: lambdas/users/congnitoLogin.handler
      Runtime: nodejs8.10
      CodeUri: ./src
      Policies: AmazonDynamoDBFullAccess
      Events:
        GetProductByIdApi:
          Type: Api
          Properties:
            Path: /cognitoLogin
            Method: POST

  GetReceivedGiftsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: lambdas/transaction/getReceivedGifts.handler
      Runtime: nodejs8.10
      CodeUri: ./src
      Policies: AmazonDynamoDBFullAccess
      Events:
        GetTransactionsApi:
          Type: Api
          Properties:
            Path: /receivedGifts
            Method: GET

  HelloFunctionGR:
      Type: AWS::Serverless::Function
      Properties:
        Handler: hello.handler
        Runtime: nodejs6.10
        CodeUri: ./
        Policies: AmazonDynamoDBFullAccess

  HelloFunctionGRPermissions:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref HelloFunctionGR
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:aws:execute-api:"
            - !Ref AWS::Region
            - ":"
            - !Ref AWS::AccountId
            - ":"
            - !Ref YoYoGiftApi
            - "/*"
 

  YoYoGiftApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: GiftApp
      Body:
        swagger: 2.0
        info:
          version: 1.0.0
          title: YoYoGiftApp
        paths:
          /HelloResourceGR:
            get:
              description: hello world
              consumes:
                - application/json
              produces:
                - application/json

              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"

              security:
                - CognitoAuthorizer: []
                

              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                uri: 
                  Fn::Join:
                    - ""
                    - - "arn:aws:apigateway:"
                      - !Ref AWS::Region
                      - ":lambda:path/2015-03-31/functions/"
                      - !GetAtt HelloFunctionGR.Arn
                      - "/invocations"
                passthroughBehavior: "when_no_match"
                httpMethod: "GET"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"

        securityDefinitions:
          CognitoAuthorizer:
            type: "apiKey"
            name: Authorization
            in: header
            x-amazon-apigateway-authtype: cognito_user_pools
            x-amazon-apigateway-authorizer:
              providerARNs:
                - arn:aws:cognito-idp:us-east-1:599408351101:userpool/us-east-1_cvNEqFSZn
              type: "cognito_user_pools"

  GiftAppApiDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      Description: Prod deployment for Gift APP API
      RestApiId: !Ref YoYoGiftApi
      StageName: prod         


  GiftAppApiDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      Description: Staging deployment for Gift APP API
      RestApiId: !Ref YoYoGiftApi
      StageName: stag

  GetCacheFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: lambdas/cache/getCache.handler
      Runtime: nodejs8.10
      CodeUri: ./src
      Policies: AmazonDynamoDBFullAccess
      Events:
        GetCacheApi:
          Type: Api
          Properties:
            Path: /cache
            Method: GET